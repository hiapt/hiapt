/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.43
 * Generated at: 2019-10-28 10:42:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.emp.chat;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import chat.model.vo.ChatMessage;
import java.util.*;

public final class chatMessage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("chat.model.vo.ChatMessage");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	ArrayList<ChatMessage> cmlist = (ArrayList<ChatMessage>)request.getAttribute("cmlist");
	String empNo = (String)request.getAttribute("empno");
	int chatNo = (int)request.getAttribute("chatno");
	String messageId = empNo+","+String.valueOf(chatNo);

      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\t#messageWindow {\r\n");
      out.write("\t\tbackground: LightSkyBlue;\r\n");
      out.write("\t\theight: 300px;\r\n");
      out.write("\t\toverflow: auto;\r\n");
      out.write("\t}\r\n");
      out.write("\t.other-side {\r\n");
      out.write("\t\tbackground: white;\r\n");
      out.write("\t\tfloat: left;\r\n");
      out.write("\t\tclear: both;\r\n");
      out.write("\t}\r\n");
      out.write("\t.other-side:after {\r\n");
      out.write("\t\tcontent: '';\r\n");
      out.write("\t\tpositon: absolute;\r\n");
      out.write("\t\tright: 0;\r\n");
      out.write("\t\ttop: 50%;\r\n");
      out.write("\t\twidth: 0;\r\n");
      out.write("\t\theight: 0;\r\n");
      out.write("\t\tborder: 20px solid transparent;\r\n");
      out.write("\t\tborder-right-color: white;\r\n");
      out.write("\t\tborder-left: 0;\r\n");
      out.write("\t\tborder-top: 0;\r\n");
      out.write("\t\tmargin-top: -3.5px;\r\n");
      out.write("\t\tmargin-right: -10px;\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\" src=\"/hiapt/resources/js/jquery-3.4.1.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write(" var webSocket =null;\r\n");
      out.write("$(function(){\r\n");
      out.write("\t webSocket = new WebSocket(\"ws://localhost:8900/hiapt/ChatMessageController\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t/* url/path/mapping */\r\n");
      out.write("\t\r\n");
      out.write("\t messageId =\"");
      out.print( messageId );
      out.write("\";\r\n");
      out.write("\t console.log(messageId);\r\n");
      out.write("\twebSocket.onopen = function(event){\r\n");
      out.write("\t\tconsole.log(\"웹소켓 연결됨\");\r\n");
      out.write("\t\twebSocket.send(messageId);\r\n");
      out.write("\t};\r\n");
      out.write("\t\r\n");
      out.write("\twebSocket.onclose = function(event){\r\n");
      out.write("\t};\r\n");
      out.write("\t\r\n");
      out.write("\twebSocket.onerror = function(event){\r\n");
      out.write("\t\tconsols.log(event);\r\n");
      out.write("\t};\r\n");
      out.write("\t\r\n");
      out.write("\twebSocket.onmessage = function(event){\r\n");
      out.write("\t\tonMessage(event);\r\n");
      out.write("\t};\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("function SocketClose(){\r\n");
      out.write("\twebSocket.close();\r\n");
      out.write("\treturn false;\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("function onMessage(event){\r\n");
      out.write("\tvar $textarea = $('#messageWindow'); //div채팅창\r\n");
      out.write("\t$textarea.html($textarea.html() +\r\n");
      out.write("\t\t\t\"id(name전달) : \" + event.data + \"<br>\");\r\n");
      out.write("\t//화면이 위로 스크롤되게 처리함\r\n");
      out.write("\t$textarea.scrollTop($textarea.height());\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("function send(){\r\n");
      out.write("\tvar $textarea = $('#messageWindow'); //div채팅창\r\n");
      out.write("\tvar inputMessage = document.getElementById(\"inputMessage\").value; \r\n");
      out.write("\tconsole.log(inputMessage);\r\n");
      out.write("\t//메세지를 입력하지 않고 버튼 누른 경우\r\n");
      out.write("\tif(inputMessage== \"\") {\r\n");
      out.write("\t\talert(\"전송할 메세지를 입력하세요.\");\r\n");
      out.write("\t}else{  //메세지가 입력된 경우\r\n");
      out.write("\t\t$textarea.html($textarea.html() + \r\n");
      out.write("\t\t\t\t\"<h3 align='right' style='margin:0'> 나 : \"\r\n");
      out.write("\t\t\t+inputMessage+ \"</h3><br>\");\r\n");
      out.write("\t\twebSocket.send(\"chat:\"+inputMessage);\r\n");
      out.write("\t\tdocument.getElementById(\"inputMessage\").value=\"\";\r\n");
      out.write("\t}\r\n");
      out.write("\t//화면이 위로 스크롤되게 처리함\r\n");
      out.write("\t$textarea.scrollTop($textarea.height());\r\n");
      out.write("\treturn false;\r\n");
      out.write("};  //send()\r\n");
      out.write("\r\n");
      out.write("\t//전송할 메세지 입력하면서, 키보드 키에서 손뗄때마다\r\n");
      out.write("\t//실행되는 이벤트핸들러 함수\r\n");
      out.write("\tfunction enterKey(){\r\n");
      out.write("\t\t//누른 키가 엔터키(Enter) 이면 메세지 전송함\r\n");
      out.write("\t\tif(window.event.keyCode == 13){\r\n");
      out.write("\t\t\tsend();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body onunload=\"SocketClose();\">\r\n");
      out.write("<div id=\"chatbox\">\r\n");
      out.write("\t<fieldset>\r\n");
      out.write("\t\t<div id=\"messageWindow\">\r\n");
      out.write(" \t\t");
 if(cmlist.size()!=0) {
      out.write("\r\n");
      out.write("\t\t");
for(ChatMessage cm : cmlist){ 
      out.write("\r\n");
      out.write("\t\t");
if(empNo.equals(cm.getEmpNo())){ 
      out.write("\r\n");
      out.write("\t\t<h3 align=\"right\" style=\"margin:0\">나 : ");
      out.print( cm.getChatContents() );
      out.write("</h3>\r\n");
      out.write("\t\t");
}else{
      out.write("\r\n");
      out.write("\t\t");
      out.print( cm.getEmpName() );
      out.write(' ');
      out.write(':');
      out.write(' ');
      out.print( cm.getChatContents() );
      out.write("<br>\r\n");
      out.write("\t\t");
}}} 
      out.write("\t \r\n");
      out.write("\t\t</div> <br>\r\n");
      out.write("\t\t<input type=\"text\" id=\"inputMessage\" onkeyup=\"enterKey();\">\r\n");
      out.write("\t\t<input type=\"button\" value=\"보내기\" onclick=\"send();\">\r\n");
      out.write("\t\t<input type=\"button\" value=\"방나가기(목록제거)\" onclick=\"roomOut();\">\r\n");
      out.write("\t</fieldset>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
