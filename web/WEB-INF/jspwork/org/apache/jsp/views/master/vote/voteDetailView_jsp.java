/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.43
 * Generated at: 2019-10-17 09:05:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.master.vote;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import vote.model.vo.Vote;

public final class voteDetailView_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("vote.model.vo.Vote");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	Vote vote = (Vote)request.getAttribute("vote");
	String vote1 = vote.getVoteOne();
	String vote2 = vote.getVoteTwo();
	String vote3 = vote.getVoteThree();
	String vote4 = vote.getVoteFour();
	String vote5 = vote.getVoteFive();
	String voteName[] = {vote1, vote2, vote3, vote4, vote5};


      out.write("  \r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script type=\"text/javascript\" src=\"/hiapt/resources/js/jquery-3.4.1.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("$(function(){\r\n");
      out.write(" \tvar count = 0;\r\n");
      out.write("\t");
 for(int i=0; i<voteName.length; i++) {
	if(voteName[i]!=null){
      out.write("\r\n");
      out.write("\tcount++;\r\n");
      out.write("\t");
}}
      out.write("\r\n");
      out.write("\t$(\"#vbutton\").click(function(){\r\n");
      out.write("\t\tvar voteCheck = $(\":input[name=voteresult]:checked\").val();\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\turl : \"vo.vrUpdate\",\r\n");
      out.write("\t\tdata : { voteresult : voteCheck, voteno : ");
      out.print( vote.getVoteNo() );
      out.write(",\r\n");
      out.write("\t\t\t\t\tvotecount : count},\r\n");
      out.write("\t\ttype : \"post\",\r\n");
      out.write("\t\tdataType : \"json\",\r\n");
      out.write("\t\tsuccess : function(data){\r\n");
      out.write("\t\t\tconsole.log(\"data : \" + data);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\terror : function(jqXHR, textStatus, errorThrown){\r\n");
      out.write("\t\t\tconsole.log(\"error : \" +textStatus);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});//아이작스\r\n");
      out.write("\treturn false;\r\n");
      out.write("\t});//클릭\r\n");
      out.write("});//펑션\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<table align=\"center\" border=\"1\">\r\n");
      out.write("<tr><th>제목</th><td>");
      out.print( vote.getVoteTitle() );
      out.write("</td></tr>\r\n");
      out.write("<tr><th>작성자</th><td>");
      out.print( vote.getVoteWrite() );
      out.write("</td></tr>\r\n");
      out.write("<tr><th>작성날짜</th><td>");
      out.print( vote.getVoteDate() );
      out.write("</td></tr>\r\n");
      out.write("<tr><th>조회수</th><td>");
      out.print( vote.getVoteReadCount() );
      out.write("</td></tr>\r\n");
      out.write("<tr><th>내용</th><td>");
      out.print( vote.getVoteContents() );
      out.write("</td></tr>\r\n");
      out.write("<tr><th>투표목록</th><th>투표결과(확인)</th></tr>\r\n");
for(int i=0; i<5; i++) {
		if(voteName[i]==null)
				break;

      out.write("<tr class=\"vtr\"><th> \r\n");
      out.write("\t");
      out.print( voteName[i] );
      out.write("<input type=\"radio\" name=\"voteresult\" value=\"");
      out.print( i+1 );
      out.write("\" required>\r\n");
      out.write("\t\t</th></tr>\r\n");
} 
      out.write("\r\n");
      out.write("<tr><td colspan=\"2\"><button id=\"vbutton\">확인</button></td></tr>\r\n");
      out.write("\r\n");
      out.write("<tr><td colspan=\"2\"><button onclick=\"javascript:window.history.go(-1);\">목록</button></td></tr>\r\n");
      out.write("</table>\r\n");
      out.write("<div id=\"div4\">\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
